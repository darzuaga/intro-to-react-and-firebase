{"id":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","dependencies":[{"name":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/package.json","includedInParent":true,"mtime":1573574947556},{"name":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/.babelrc","includedInParent":true,"mtime":1573487978998},{"name":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/package.json","includedInParent":true,"mtime":1573568354156},{"name":"../internals/create-non-enumerable-property","loc":{"line":2,"column":42},"parent":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","resolved":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/create-non-enumerable-property.js"},{"name":"../internals/redefine","loc":{"line":3,"column":23},"parent":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","resolved":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/redefine.js"},{"name":"../internals/fails","loc":{"line":4,"column":20},"parent":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","resolved":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/fails.js"},{"name":"../internals/well-known-symbol","loc":{"line":5,"column":30},"parent":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","resolved":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/well-known-symbol.js"},{"name":"../internals/regexp-exec","loc":{"line":6,"column":25},"parent":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","resolved":"/Users/1infiniteloop/Projects/tutorials/intro-to-react-and-firebase/node_modules/core-js/internals/regexp-exec.js"}],"generated":{"js":"'use strict';\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar regexpExec = require('../internals/regexp-exec');\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n    if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);\n  }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}}],"sources":{"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":"'use strict';\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar regexpExec = require('../internals/regexp-exec');\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n    if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);\n  }\n};\n"},"lineCount":101}},"error":null,"hash":"d422be47db25293c05a93f3a7ff3762c","cacheData":{"env":{}}}